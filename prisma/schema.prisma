generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum CardType {
  COMMON    @map("common")
  RARE      @map("rare")
  EPIC      @map("epic")
  LEGENDARY @map("legendary")
}

model User {
  id              String     @id @default(uuid())
  username        String
  email           String     @unique
  avatarUrl       String?    @map("avatar_url")
  password        String?
  description     String?
  currencyBalance Float      @default(0.0) @map("currency_balance")
  frame           String     @default("default")
  level           Int        @default(1)
  cards           UserCard[]

  googleId String? @map("google_id")
  githubId String? @map("github_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")
}

model UserCard {
  userId     String   @map("user_id")
  cardId     String   @map("card_id")
  acquiredAt DateTime @default(now()) @map("acquired_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  card Card @relation(fields: [cardId], references: [id], onDelete: Cascade)

  @@id([userId, cardId])
  @@map("user_card")
}

model Card {
  id          String     @id @default(uuid())
  name        String     @unique()
  imageUrl    String     @map("image_url")
  description String
  type        CardType   @map("type")
  lane        Int
  strength    Int
  users       UserCard[]

  containerDrops ContainerDrop[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")
}

model Container {
  id          String          @id @default(uuid())
  name        String
  description String
  price       Float           @default(0.0)
  imageUrl    String
  drops       ContainerDrop[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")
}

model ContainerDrop {
  id          String    @id @default(uuid())
  container   Container @relation(fields: [containerId], references: [id], onDelete: Cascade)
  containerId String    @map("container_id")

  card   Card   @relation(fields: [cardId], references: [id], onDelete: Cascade)
  cardId String @map("card_id")

  dropChancePct Decimal @map("drop_chance_pct")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")

  @@map("container_drop")
}
