generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum CardType {
  COMMON    @map("common")
  RARE      @map("rare")
  EPIC      @map("epic")
  LEGENDARY @map("legendary")
}

enum SpecialEffectType {
  ATTACK @map("attack")
  HEAL   @map("heal")
}

enum MatchResult {
  WIN   @map("win")
  LOSE  @map("lose")
}

model User {
  id                String     @id @default(uuid())
  username          String
  email             String     @unique
  avatarUrl         String?    @map("avatar_url")
  password          String?
  description       String?
  currencyBalance   Float      @default(0.0) @map("currency_balance")
  frame             String     @default("default")
  level             Int        @default(1)
  experienceCurrent Int        @default(0) @map("experience_current")
  experienceToNext  Int        @default(100) @map("experience_to_next")
  cards             UserCard[]
  matches           Match[]

  googleId String? @map("google_id")
  githubId String? @map("github_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")
}

model UserCard {
  userId     String   @map("user_id")
  cardId     String   @map("card_id")
  acquiredAt DateTime @default(now()) @map("acquired_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  card Card @relation(fields: [cardId], references: [id], onDelete: Cascade)

  @@id([userId, cardId])
  @@map("user_card")
}

model Card {
  id             String          @id @default(uuid())
  name           String          @unique()
  imageUrl       String          @map("image_url")
  description    String?
  cardCategory   String          @map("card_category")
  type           CardType        @map("type")
  health         Int?
  strength       Int
  isLeader       Boolean?        @default(false)
  fraction       String
  users          UserCard[]
  containerDrops ContainerDrop[]

  specialEffect   SpecialEffect? @relation(fields: [specialEffectId], references: [id])
  specialEffectId String?        @map("special_effect_id")
  createdAt       DateTime       @default(now()) @map("created_at")
  updatedAt       DateTime       @updatedAt() @map("updated_at")
}

model SpecialEffect {
  id          String            @id
  name        String
  description String
  type        SpecialEffectType
  power       Int

  cards Card[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")

  @@map("special_effect")
}

model Container {
  id          String          @id @default(uuid())
  name        String
  description String
  price       Float           @default(0.0)
  drops       ContainerDrop[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")
}

model ContainerDrop {
  id          String    @id @default(uuid())
  container   Container @relation(fields: [containerId], references: [id], onDelete: Cascade)
  containerId String    @map("container_id")

  card   Card   @relation(fields: [cardId], references: [id], onDelete: Cascade)
  cardId String @map("card_id")

  dropChancePct Decimal @map("drop_chance_pct")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")

  @@map("container_drop")
}

model Match {
  id         String       @id @default(uuid())
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String       @map("user_id")
  result     MatchResult  @map("result")
  playedAt   DateTime     @default(now()) @map("played_at")

  @@map("matches")
  @@index([userId, playedAt])
}